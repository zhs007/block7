// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: block7.proto

package block7pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Column
type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{0}
}

func (x *Column) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// SceneLayer - scene layer
type SceneLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Column `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SceneLayer) Reset() {
	*x = SceneLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneLayer) ProtoMessage() {}

func (x *SceneLayer) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneLayer.ProtoReflect.Descriptor instead.
func (*SceneLayer) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{1}
}

func (x *SceneLayer) GetValues() []*Column {
	if x != nil {
		return x.Values
	}
	return nil
}

// SpecialLayer - special layer
type SpecialLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Special   int32   `protobuf:"varint,1,opt,name=special,proto3" json:"special,omitempty"`      // specialType
	Layer     int32   `protobuf:"varint,2,opt,name=layer,proto3" json:"layer,omitempty"`          // layer
	LayerType int32   `protobuf:"varint,3,opt,name=layerType,proto3" json:"layerType,omitempty"`  // layerType
	Values    []int32 `protobuf:"varint,4,rep,packed,name=values,proto3" json:"values,omitempty"` // pos, it like [x0,y0,z0,x1,y1,z1]
}

func (x *SpecialLayer) Reset() {
	*x = SpecialLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialLayer) ProtoMessage() {}

func (x *SpecialLayer) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialLayer.ProtoReflect.Descriptor instead.
func (*SpecialLayer) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{2}
}

func (x *SpecialLayer) GetSpecial() int32 {
	if x != nil {
		return x.Special
	}
	return 0
}

func (x *SpecialLayer) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *SpecialLayer) GetLayerType() int32 {
	if x != nil {
		return x.LayerType
	}
	return 0
}

func (x *SpecialLayer) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Scene - scene
type Scene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`   // width
	Height int32 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"` // height
	Layers int32 `protobuf:"varint,3,opt,name=Layers,proto3" json:"Layers,omitempty"` // layers
	XOff   int32 `protobuf:"varint,4,opt,name=XOff,proto3" json:"XOff,omitempty"`     // x offset
	YOff   int32 `protobuf:"varint,5,opt,name=YOff,proto3" json:"YOff,omitempty"`     // y offset
	// Deprecated: Do not use.
	InitArr []*SceneLayer `protobuf:"bytes,6,rep,name=InitArr,proto3" json:"InitArr,omitempty"` // initial data
	// Deprecated: Do not use.
	History []*Column `protobuf:"bytes,7,rep,name=History,proto3" json:"History,omitempty"` // history
	// Deprecated: Do not use.
	ClickValues int32 `protobuf:"varint,8,opt,name=ClickValues,proto3" json:"ClickValues,omitempty"` // ClickValues
	// Deprecated: Do not use.
	FinishedPer float32 `protobuf:"fixed32,9,opt,name=FinishedPer,proto3" json:"FinishedPer,omitempty"` // FinishedPer
	Offset      string  `protobuf:"bytes,10,opt,name=Offset,proto3" json:"Offset,omitempty"`            // Offset
	// Deprecated: Do not use.
	IsOutputScene bool `protobuf:"varint,11,opt,name=IsOutputScene,proto3" json:"IsOutputScene,omitempty"` // IsOutputScene
	// Deprecated: Do not use.
	StageID int32 `protobuf:"varint,12,opt,name=StageID,proto3" json:"StageID,omitempty"` // stage
	// Deprecated: Do not use.
	MapID           string          `protobuf:"bytes,13,opt,name=MapID,proto3" json:"MapID,omitempty"`               // map
	Version         int32           `protobuf:"varint,14,opt,name=Version,proto3" json:"Version,omitempty"`          // version
	SceneID         int64           `protobuf:"varint,15,opt,name=sceneID,proto3" json:"sceneID,omitempty"`          // id
	UserID          int64           `protobuf:"varint,16,opt,name=userID,proto3" json:"userID,omitempty"`            // userid
	HistoryID       int64           `protobuf:"varint,17,opt,name=historyID,proto3" json:"historyID,omitempty"`      // historyid
	MapID2          int32           `protobuf:"varint,18,opt,name=MapID2,proto3" json:"MapID2,omitempty"`            // map
	SpecialLayer    []*SpecialLayer `protobuf:"bytes,19,rep,name=specialLayer,proto3" json:"specialLayer,omitempty"` // SpecialLayer
	InitArr2        []int32         `protobuf:"varint,20,rep,packed,name=InitArr2,proto3" json:"InitArr2,omitempty"` // initial data
	History2        []int32         `protobuf:"varint,21,rep,packed,name=History2,proto3" json:"History2,omitempty"` // history
	RngData         []int64         `protobuf:"varint,22,rep,packed,name=RngData,proto3" json:"RngData,omitempty"`   // rngdata
	GameState       int32           `protobuf:"varint,23,opt,name=GameState,proto3" json:"GameState,omitempty"`      // gamestate
	BlockNums       int32           `protobuf:"varint,24,opt,name=BlockNums,proto3" json:"BlockNums,omitempty"`      // blockNums, it's like 7, 8
	StageID2        int32           `protobuf:"varint,25,opt,name=StageID2,proto3" json:"StageID2,omitempty"`        // stage
	Ts              int64           `protobuf:"varint,26,opt,name=ts,proto3" json:"ts,omitempty"`                    // timestamp
	ClientMissionID int32           `protobuf:"varint,27,opt,name=ClientMissionID,proto3" json:"ClientMissionID,omitempty"`
	ClientStageType int32           `protobuf:"varint,28,opt,name=ClientStageType,proto3" json:"ClientStageType,omitempty"`
	FirstItem       int32           `protobuf:"varint,29,opt,name=FirstItem,proto3" json:"FirstItem,omitempty"`
}

func (x *Scene) Reset() {
	*x = Scene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scene) ProtoMessage() {}

func (x *Scene) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scene.ProtoReflect.Descriptor instead.
func (*Scene) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{3}
}

func (x *Scene) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Scene) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Scene) GetLayers() int32 {
	if x != nil {
		return x.Layers
	}
	return 0
}

func (x *Scene) GetXOff() int32 {
	if x != nil {
		return x.XOff
	}
	return 0
}

func (x *Scene) GetYOff() int32 {
	if x != nil {
		return x.YOff
	}
	return 0
}

// Deprecated: Do not use.
func (x *Scene) GetInitArr() []*SceneLayer {
	if x != nil {
		return x.InitArr
	}
	return nil
}

// Deprecated: Do not use.
func (x *Scene) GetHistory() []*Column {
	if x != nil {
		return x.History
	}
	return nil
}

// Deprecated: Do not use.
func (x *Scene) GetClickValues() int32 {
	if x != nil {
		return x.ClickValues
	}
	return 0
}

// Deprecated: Do not use.
func (x *Scene) GetFinishedPer() float32 {
	if x != nil {
		return x.FinishedPer
	}
	return 0
}

func (x *Scene) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

// Deprecated: Do not use.
func (x *Scene) GetIsOutputScene() bool {
	if x != nil {
		return x.IsOutputScene
	}
	return false
}

// Deprecated: Do not use.
func (x *Scene) GetStageID() int32 {
	if x != nil {
		return x.StageID
	}
	return 0
}

// Deprecated: Do not use.
func (x *Scene) GetMapID() string {
	if x != nil {
		return x.MapID
	}
	return ""
}

func (x *Scene) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Scene) GetSceneID() int64 {
	if x != nil {
		return x.SceneID
	}
	return 0
}

func (x *Scene) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Scene) GetHistoryID() int64 {
	if x != nil {
		return x.HistoryID
	}
	return 0
}

func (x *Scene) GetMapID2() int32 {
	if x != nil {
		return x.MapID2
	}
	return 0
}

func (x *Scene) GetSpecialLayer() []*SpecialLayer {
	if x != nil {
		return x.SpecialLayer
	}
	return nil
}

func (x *Scene) GetInitArr2() []int32 {
	if x != nil {
		return x.InitArr2
	}
	return nil
}

func (x *Scene) GetHistory2() []int32 {
	if x != nil {
		return x.History2
	}
	return nil
}

func (x *Scene) GetRngData() []int64 {
	if x != nil {
		return x.RngData
	}
	return nil
}

func (x *Scene) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *Scene) GetBlockNums() int32 {
	if x != nil {
		return x.BlockNums
	}
	return 0
}

func (x *Scene) GetStageID2() int32 {
	if x != nil {
		return x.StageID2
	}
	return 0
}

func (x *Scene) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Scene) GetClientMissionID() int32 {
	if x != nil {
		return x.ClientMissionID
	}
	return 0
}

func (x *Scene) GetClientStageType() int32 {
	if x != nil {
		return x.ClientStageType
	}
	return 0
}

func (x *Scene) GetFirstItem() int32 {
	if x != nil {
		return x.FirstItem
	}
	return 0
}

// UserDeviceInfo
type UserDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserHash        string `protobuf:"bytes,1,opt,name=UserHash,proto3" json:"UserHash,omitempty"`               // user hash
	Game            string `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`                       // game code
	Platform        string `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`               // ios or android
	ADID            string `protobuf:"bytes,4,opt,name=ADID,proto3" json:"ADID,omitempty"`                       // ad id
	GUID            string `protobuf:"bytes,5,opt,name=GUID,proto3" json:"GUID,omitempty"`                       // guid
	PlatformInfo    string `protobuf:"bytes,6,opt,name=PlatformInfo,proto3" json:"PlatformInfo,omitempty"`       // platform infomation
	GameVersion     string `protobuf:"bytes,7,opt,name=GameVersion,proto3" json:"GameVersion,omitempty"`         // game version
	ResourceVersion string `protobuf:"bytes,8,opt,name=ResourceVersion,proto3" json:"ResourceVersion,omitempty"` // game resource version
	DeviceInfo      string `protobuf:"bytes,9,opt,name=DeviceInfo,proto3" json:"DeviceInfo,omitempty"`           // device infomation
	CreateTs        int64  `protobuf:"varint,10,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`             // create timestamp
	LoginTimes      int32  `protobuf:"varint,11,opt,name=LoginTimes,proto3" json:"LoginTimes,omitempty"`         // login times
	LastLoginTs     int64  `protobuf:"varint,12,opt,name=LastLoginTs,proto3" json:"LastLoginTs,omitempty"`       // last login timestamp
	IPAddr          string `protobuf:"bytes,13,opt,name=IPAddr,proto3" json:"IPAddr,omitempty"`                  // IP Address
}

func (x *UserDeviceInfo) Reset() {
	*x = UserDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceInfo) ProtoMessage() {}

func (x *UserDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceInfo.ProtoReflect.Descriptor instead.
func (*UserDeviceInfo) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{4}
}

func (x *UserDeviceInfo) GetUserHash() string {
	if x != nil {
		return x.UserHash
	}
	return ""
}

func (x *UserDeviceInfo) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *UserDeviceInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserDeviceInfo) GetADID() string {
	if x != nil {
		return x.ADID
	}
	return ""
}

func (x *UserDeviceInfo) GetGUID() string {
	if x != nil {
		return x.GUID
	}
	return ""
}

func (x *UserDeviceInfo) GetPlatformInfo() string {
	if x != nil {
		return x.PlatformInfo
	}
	return ""
}

func (x *UserDeviceInfo) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *UserDeviceInfo) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *UserDeviceInfo) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *UserDeviceInfo) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

func (x *UserDeviceInfo) GetLoginTimes() int32 {
	if x != nil {
		return x.LoginTimes
	}
	return 0
}

func (x *UserDeviceInfo) GetLastLoginTs() int64 {
	if x != nil {
		return x.LastLoginTs
	}
	return 0
}

func (x *UserDeviceInfo) GetIPAddr() string {
	if x != nil {
		return x.IPAddr
	}
	return ""
}

// UserInfo
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64             `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Data   []*UserDeviceInfo `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"` // user device infomations
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{5}
}

func (x *UserInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserInfo) GetData() []*UserDeviceInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// Cooking
type Cooking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    int32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Unlock   bool  `protobuf:"varint,2,opt,name=Unlock,proto3" json:"Unlock,omitempty"`
	StarNums int32 `protobuf:"varint,3,opt,name=StarNums,proto3" json:"StarNums,omitempty"`
}

func (x *Cooking) Reset() {
	*x = Cooking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cooking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cooking) ProtoMessage() {}

func (x *Cooking) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cooking.ProtoReflect.Descriptor instead.
func (*Cooking) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{6}
}

func (x *Cooking) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Cooking) GetUnlock() bool {
	if x != nil {
		return x.Unlock
	}
	return false
}

func (x *Cooking) GetStarNums() int32 {
	if x != nil {
		return x.StarNums
	}
	return 0
}

// UserData
type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Coin          int64            `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Level         int32            `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	LevelArr      map[string]int32 `protobuf:"bytes,4,rep,name=LevelArr,proto3" json:"LevelArr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ToolsArr      map[string]int32 `protobuf:"bytes,5,rep,name=ToolsArr,proto3" json:"ToolsArr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HomeScene     []int32          `protobuf:"varint,6,rep,packed,name=HomeScene,proto3" json:"HomeScene,omitempty"`
	Cooking       []*Cooking       `protobuf:"bytes,7,rep,name=Cooking,proto3" json:"Cooking,omitempty"`
	Platform      string           `protobuf:"bytes,8,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Version       int64            `protobuf:"varint,9,opt,name=Version,proto3" json:"Version,omitempty"`
	UserID        int64            `protobuf:"varint,10,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LastTs        int64            `protobuf:"varint,11,opt,name=LastTs,proto3" json:"LastTs,omitempty"` // last timestamp
	ClientVersion string           `protobuf:"bytes,12,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
	LastAwardTs   int64            `protobuf:"varint,13,opt,name=LastAwardTs,proto3" json:"LastAwardTs,omitempty"`
	CreateTs      int64            `protobuf:"varint,14,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{7}
}

func (x *UserData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UserData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserData) GetLevelArr() map[string]int32 {
	if x != nil {
		return x.LevelArr
	}
	return nil
}

func (x *UserData) GetToolsArr() map[string]int32 {
	if x != nil {
		return x.ToolsArr
	}
	return nil
}

func (x *UserData) GetHomeScene() []int32 {
	if x != nil {
		return x.HomeScene
	}
	return nil
}

func (x *UserData) GetCooking() []*Cooking {
	if x != nil {
		return x.Cooking
	}
	return nil
}

func (x *UserData) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *UserData) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserData) GetLastTs() int64 {
	if x != nil {
		return x.LastTs
	}
	return 0
}

func (x *UserData) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *UserData) GetLastAwardTs() int64 {
	if x != nil {
		return x.LastAwardTs
	}
	return 0
}

func (x *UserData) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

type HistoryStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums          int32           `protobuf:"varint,1,opt,name=Nums,proto3" json:"Nums,omitempty"`
	GameStateNums map[int32]int32 `protobuf:"bytes,2,rep,name=GameStateNums,proto3" json:"GameStateNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *HistoryStageData) Reset() {
	*x = HistoryStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryStageData) ProtoMessage() {}

func (x *HistoryStageData) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryStageData.ProtoReflect.Descriptor instead.
func (*HistoryStageData) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{8}
}

func (x *HistoryStageData) GetNums() int32 {
	if x != nil {
		return x.Nums
	}
	return 0
}

func (x *HistoryStageData) GetGameStateNums() map[int32]int32 {
	if x != nil {
		return x.GameStateNums
	}
	return nil
}

type UserStageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStateNums map[int32]int32 `protobuf:"bytes,1,rep,name=GameStateNums,proto3" json:"GameStateNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UserStageData) Reset() {
	*x = UserStageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStageData) ProtoMessage() {}

func (x *UserStageData) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStageData.ProtoReflect.Descriptor instead.
func (*UserStageData) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{9}
}

func (x *UserStageData) GetGameStateNums() map[int32]int32 {
	if x != nil {
		return x.GameStateNums
	}
	return nil
}

type UserDayStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64                    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Stages map[int32]*UserStageData `protobuf:"bytes,2,rep,name=Stages,proto3" json:"Stages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserDayStatsData) Reset() {
	*x = UserDayStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDayStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDayStatsData) ProtoMessage() {}

func (x *UserDayStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDayStatsData.ProtoReflect.Descriptor instead.
func (*UserDayStatsData) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{10}
}

func (x *UserDayStatsData) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserDayStatsData) GetStages() map[int32]*UserStageData {
	if x != nil {
		return x.Stages
	}
	return nil
}

// DayStatsData
type DayStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                int64           `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	NewUserNums       int32           `protobuf:"varint,2,opt,name=NewUserNums,proto3" json:"NewUserNums,omitempty"`
	AliveUserNums     int32           `protobuf:"varint,3,opt,name=AliveUserNums,proto3" json:"AliveUserNums,omitempty"`
	NewStageNums      int32           `protobuf:"varint,4,opt,name=NewStageNums,proto3" json:"NewStageNums,omitempty"`
	StageOKNums       int32           `protobuf:"varint,5,opt,name=StageOKNums,proto3" json:"StageOKNums,omitempty"`
	StageFailNums     int32           `protobuf:"varint,6,opt,name=StageFailNums,proto3" json:"StageFailNums,omitempty"`
	StageCancelNums   int32           `protobuf:"varint,7,opt,name=StageCancelNums,proto3" json:"StageCancelNums,omitempty"`
	Time              string          `protobuf:"bytes,8,opt,name=Time,proto3" json:"Time,omitempty"`
	FirstUserID       int64           `protobuf:"varint,9,opt,name=FirstUserID,proto3" json:"FirstUserID,omitempty"`
	FirstSceneID      int64           `protobuf:"varint,10,opt,name=FirstSceneID,proto3" json:"FirstSceneID,omitempty"`
	FirstHistoryID    int64           `protobuf:"varint,11,opt,name=FirstHistoryID,proto3" json:"FirstHistoryID,omitempty"`
	NewUserDataNums   int32           `protobuf:"varint,12,opt,name=NewUserDataNums,proto3" json:"NewUserDataNums,omitempty"`
	AliveUserDataNums int32           `protobuf:"varint,13,opt,name=AliveUserDataNums,proto3" json:"AliveUserDataNums,omitempty"`
	FirstUserDataUID  int64           `protobuf:"varint,14,opt,name=FirstUserDataUID,proto3" json:"FirstUserDataUID,omitempty"`
	SceneNums         int32           `protobuf:"varint,15,opt,name=SceneNums,proto3" json:"SceneNums,omitempty"`
	MapNums           map[int32]int32 `protobuf:"bytes,16,rep,name=MapNums,proto3" json:"MapNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StageNums         map[int32]int32 `protobuf:"bytes,17,rep,name=StageNums,proto3" json:"StageNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HistoryNums       int32           `protobuf:"varint,18,opt,name=HistoryNums,proto3" json:"HistoryNums,omitempty"`
	// Deprecated: Do not use.
	HistoryMapNums map[int32]int32 `protobuf:"bytes,19,rep,name=HistoryMapNums,proto3" json:"HistoryMapNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Deprecated: Do not use.
	HistoryStageNums     map[int32]int32              `protobuf:"bytes,20,rep,name=HistoryStageNums,proto3" json:"HistoryStageNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HistoryGameStateNums map[int32]int32              `protobuf:"bytes,21,rep,name=HistoryGameStateNums,proto3" json:"HistoryGameStateNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HistoryStages2       map[int32]*HistoryStageData  `protobuf:"bytes,22,rep,name=HistoryStages2,proto3" json:"HistoryStages2,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Users                map[string]*UserDayStatsData `protobuf:"bytes,23,rep,name=Users,proto3" json:"Users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HistoryUserIDNums    map[int64]int32              `protobuf:"bytes,24,rep,name=HistoryUserIDNums,proto3" json:"HistoryUserIDNums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DayStatsData) Reset() {
	*x = DayStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block7_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayStatsData) ProtoMessage() {}

func (x *DayStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_block7_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayStatsData.ProtoReflect.Descriptor instead.
func (*DayStatsData) Descriptor() ([]byte, []int) {
	return file_block7_proto_rawDescGZIP(), []int{11}
}

func (x *DayStatsData) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *DayStatsData) GetNewUserNums() int32 {
	if x != nil {
		return x.NewUserNums
	}
	return 0
}

func (x *DayStatsData) GetAliveUserNums() int32 {
	if x != nil {
		return x.AliveUserNums
	}
	return 0
}

func (x *DayStatsData) GetNewStageNums() int32 {
	if x != nil {
		return x.NewStageNums
	}
	return 0
}

func (x *DayStatsData) GetStageOKNums() int32 {
	if x != nil {
		return x.StageOKNums
	}
	return 0
}

func (x *DayStatsData) GetStageFailNums() int32 {
	if x != nil {
		return x.StageFailNums
	}
	return 0
}

func (x *DayStatsData) GetStageCancelNums() int32 {
	if x != nil {
		return x.StageCancelNums
	}
	return 0
}

func (x *DayStatsData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DayStatsData) GetFirstUserID() int64 {
	if x != nil {
		return x.FirstUserID
	}
	return 0
}

func (x *DayStatsData) GetFirstSceneID() int64 {
	if x != nil {
		return x.FirstSceneID
	}
	return 0
}

func (x *DayStatsData) GetFirstHistoryID() int64 {
	if x != nil {
		return x.FirstHistoryID
	}
	return 0
}

func (x *DayStatsData) GetNewUserDataNums() int32 {
	if x != nil {
		return x.NewUserDataNums
	}
	return 0
}

func (x *DayStatsData) GetAliveUserDataNums() int32 {
	if x != nil {
		return x.AliveUserDataNums
	}
	return 0
}

func (x *DayStatsData) GetFirstUserDataUID() int64 {
	if x != nil {
		return x.FirstUserDataUID
	}
	return 0
}

func (x *DayStatsData) GetSceneNums() int32 {
	if x != nil {
		return x.SceneNums
	}
	return 0
}

func (x *DayStatsData) GetMapNums() map[int32]int32 {
	if x != nil {
		return x.MapNums
	}
	return nil
}

func (x *DayStatsData) GetStageNums() map[int32]int32 {
	if x != nil {
		return x.StageNums
	}
	return nil
}

func (x *DayStatsData) GetHistoryNums() int32 {
	if x != nil {
		return x.HistoryNums
	}
	return 0
}

// Deprecated: Do not use.
func (x *DayStatsData) GetHistoryMapNums() map[int32]int32 {
	if x != nil {
		return x.HistoryMapNums
	}
	return nil
}

// Deprecated: Do not use.
func (x *DayStatsData) GetHistoryStageNums() map[int32]int32 {
	if x != nil {
		return x.HistoryStageNums
	}
	return nil
}

func (x *DayStatsData) GetHistoryGameStateNums() map[int32]int32 {
	if x != nil {
		return x.HistoryGameStateNums
	}
	return nil
}

func (x *DayStatsData) GetHistoryStages2() map[int32]*HistoryStageData {
	if x != nil {
		return x.HistoryStages2
	}
	return nil
}

func (x *DayStatsData) GetUsers() map[string]*UserDayStatsData {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *DayStatsData) GetHistoryUserIDNums() map[int64]int32 {
	if x != nil {
		return x.HistoryUserIDNums
	}
	return nil
}

var File_block7_proto protoreflect.FileDescriptor

var file_block7_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x22, 0x20, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x37, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x74, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x89, 0x07, 0x0a, 0x05, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x58, 0x4f, 0x66, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x58, 0x4f, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x59, 0x4f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x4f, 0x66, 0x66,
	0x12, 0x32, 0x0a, 0x07, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x72, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x49, 0x6e, 0x69,
	0x74, 0x41, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x49, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x49, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x32, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x32, 0x12, 0x3a, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74,
	0x41, 0x72, 0x72, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x69, 0x74,
	0x41, 0x72, 0x72, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x32,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x52, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x8a, 0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x44, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x41, 0x44, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x22, 0x50, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0xd3, 0x04, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x72, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72,
	0x72, 0x12, 0x3c, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x72, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd,
	0x01, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x1a, 0x40, 0x0a, 0x12,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3,
	0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x50, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0x52, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x0e, 0x0a, 0x0c, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x4b, 0x4e, 0x75, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x4b,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x4e,
	0x75, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x4d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x56,
	0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70,
	0x62, 0x2e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x64, 0x0a, 0x14, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x32, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x32, 0x12, 0x37,
	0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x4e, 0x75, 0x6d, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x43, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5d, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37,
	0x70, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x37, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_block7_proto_rawDescOnce sync.Once
	file_block7_proto_rawDescData = file_block7_proto_rawDesc
)

func file_block7_proto_rawDescGZIP() []byte {
	file_block7_proto_rawDescOnce.Do(func() {
		file_block7_proto_rawDescData = protoimpl.X.CompressGZIP(file_block7_proto_rawDescData)
	})
	return file_block7_proto_rawDescData
}

var file_block7_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_block7_proto_goTypes = []interface{}{
	(*Column)(nil),           // 0: block7pb.Column
	(*SceneLayer)(nil),       // 1: block7pb.SceneLayer
	(*SpecialLayer)(nil),     // 2: block7pb.SpecialLayer
	(*Scene)(nil),            // 3: block7pb.Scene
	(*UserDeviceInfo)(nil),   // 4: block7pb.UserDeviceInfo
	(*UserInfo)(nil),         // 5: block7pb.UserInfo
	(*Cooking)(nil),          // 6: block7pb.Cooking
	(*UserData)(nil),         // 7: block7pb.UserData
	(*HistoryStageData)(nil), // 8: block7pb.HistoryStageData
	(*UserStageData)(nil),    // 9: block7pb.UserStageData
	(*UserDayStatsData)(nil), // 10: block7pb.UserDayStatsData
	(*DayStatsData)(nil),     // 11: block7pb.DayStatsData
	nil,                      // 12: block7pb.UserData.LevelArrEntry
	nil,                      // 13: block7pb.UserData.ToolsArrEntry
	nil,                      // 14: block7pb.HistoryStageData.GameStateNumsEntry
	nil,                      // 15: block7pb.UserStageData.GameStateNumsEntry
	nil,                      // 16: block7pb.UserDayStatsData.StagesEntry
	nil,                      // 17: block7pb.DayStatsData.MapNumsEntry
	nil,                      // 18: block7pb.DayStatsData.StageNumsEntry
	nil,                      // 19: block7pb.DayStatsData.HistoryMapNumsEntry
	nil,                      // 20: block7pb.DayStatsData.HistoryStageNumsEntry
	nil,                      // 21: block7pb.DayStatsData.HistoryGameStateNumsEntry
	nil,                      // 22: block7pb.DayStatsData.HistoryStages2Entry
	nil,                      // 23: block7pb.DayStatsData.UsersEntry
	nil,                      // 24: block7pb.DayStatsData.HistoryUserIDNumsEntry
}
var file_block7_proto_depIdxs = []int32{
	0,  // 0: block7pb.SceneLayer.values:type_name -> block7pb.Column
	1,  // 1: block7pb.Scene.InitArr:type_name -> block7pb.SceneLayer
	0,  // 2: block7pb.Scene.History:type_name -> block7pb.Column
	2,  // 3: block7pb.Scene.specialLayer:type_name -> block7pb.SpecialLayer
	4,  // 4: block7pb.UserInfo.Data:type_name -> block7pb.UserDeviceInfo
	12, // 5: block7pb.UserData.LevelArr:type_name -> block7pb.UserData.LevelArrEntry
	13, // 6: block7pb.UserData.ToolsArr:type_name -> block7pb.UserData.ToolsArrEntry
	6,  // 7: block7pb.UserData.Cooking:type_name -> block7pb.Cooking
	14, // 8: block7pb.HistoryStageData.GameStateNums:type_name -> block7pb.HistoryStageData.GameStateNumsEntry
	15, // 9: block7pb.UserStageData.GameStateNums:type_name -> block7pb.UserStageData.GameStateNumsEntry
	16, // 10: block7pb.UserDayStatsData.Stages:type_name -> block7pb.UserDayStatsData.StagesEntry
	17, // 11: block7pb.DayStatsData.MapNums:type_name -> block7pb.DayStatsData.MapNumsEntry
	18, // 12: block7pb.DayStatsData.StageNums:type_name -> block7pb.DayStatsData.StageNumsEntry
	19, // 13: block7pb.DayStatsData.HistoryMapNums:type_name -> block7pb.DayStatsData.HistoryMapNumsEntry
	20, // 14: block7pb.DayStatsData.HistoryStageNums:type_name -> block7pb.DayStatsData.HistoryStageNumsEntry
	21, // 15: block7pb.DayStatsData.HistoryGameStateNums:type_name -> block7pb.DayStatsData.HistoryGameStateNumsEntry
	22, // 16: block7pb.DayStatsData.HistoryStages2:type_name -> block7pb.DayStatsData.HistoryStages2Entry
	23, // 17: block7pb.DayStatsData.Users:type_name -> block7pb.DayStatsData.UsersEntry
	24, // 18: block7pb.DayStatsData.HistoryUserIDNums:type_name -> block7pb.DayStatsData.HistoryUserIDNumsEntry
	9,  // 19: block7pb.UserDayStatsData.StagesEntry.value:type_name -> block7pb.UserStageData
	8,  // 20: block7pb.DayStatsData.HistoryStages2Entry.value:type_name -> block7pb.HistoryStageData
	10, // 21: block7pb.DayStatsData.UsersEntry.value:type_name -> block7pb.UserDayStatsData
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_block7_proto_init() }
func file_block7_proto_init() {
	if File_block7_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_block7_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cooking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDayStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block7_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_block7_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_block7_proto_goTypes,
		DependencyIndexes: file_block7_proto_depIdxs,
		MessageInfos:      file_block7_proto_msgTypes,
	}.Build()
	File_block7_proto = out.File
	file_block7_proto_rawDesc = nil
	file_block7_proto_goTypes = nil
	file_block7_proto_depIdxs = nil
}
